import java.awt.Color;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.util.*;
import javax.swing.DefaultListModel;

//java.io import utilizes File, IOException and RandomAccessFiles in my program

public class StudyScheduler extends javax.swing.JFrame {
    
    
    /**
     * Creates new form MyTasks
     */
    public StudyScheduler() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        //jList1.setVisible(false);
        //jList2.setVisible(false);
        //jList3.setVisible(false);
    }
        
    public File convertToFile() {        
        try {
            File list = new File("taskList.txt");
            if (list.createNewFile()) {
                System.out.println("File created: " + list.getName());
                return list;
            } else {
                System.out.println("File already exists.");
            }
            
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        return null;
    }
    
    /*public static void saveToFile(String fileName, String text, boolean append) thows IOException {
        File file1 = new File(filename)
    } */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        myTasksPanel = new javax.swing.JPanel();
        newTaskButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        checkList_JList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        todayJList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        tomorrowJList = new javax.swing.JList<>();
        saveButton = new javax.swing.JButton();
        myDayPanel = new javax.swing.JPanel();
        generateTodaysTasks = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        todaySortedJList = new javax.swing.JList<>();
        jLabel7 = new javax.swing.JLabel();
        downloadSorted = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tomorrowSortedJList = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        generateTomorrowsTasks = new javax.swing.JButton();
        myCalendarPanel = new javax.swing.JPanel();
        generateMonthTasks = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        monthsSortedJList = new javax.swing.JList<>();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseexited(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(204, 255, 255));
        jPanel3.setPreferredSize(new java.awt.Dimension(155, 100));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseclicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseexited(evt);
            }
        });

        jLabel1.setText("My Tasks");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jLabel1)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(40, 40, 40))
        );

        jPanel4.setBackground(new java.awt.Color(204, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(155, 100));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseclicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseexited(evt);
            }
        });

        jLabel2.setText("My Day");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel2)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(204, 255, 255));
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mouseclicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                mouseexited(evt);
            }
        });

        jLabel3.setText("My Calendar");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel3)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel3)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel3, jPanel4, jPanel5});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel3, jPanel5});

        jPanel1.add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel6.setLayout(new java.awt.CardLayout());

        myTasksPanel.setBackground(new java.awt.Color(204, 204, 255));

        newTaskButton.setText("+ New Task");
        newTaskButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTaskButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Checklist:");

        jLabel5.setText("Due Today");

        jLabel6.setText("Due Tomorrow");

        checkList_JList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkList_JListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(checkList_JList);

        todayJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                todayJListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(todayJList);

        tomorrowJList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tomorrowJListMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tomorrowJList);

        saveButton.setText("Save to File");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout myTasksPanelLayout = new javax.swing.GroupLayout(myTasksPanel);
        myTasksPanel.setLayout(myTasksPanelLayout);
        myTasksPanelLayout.setHorizontalGroup(
            myTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myTasksPanelLayout.createSequentialGroup()
                .addGroup(myTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(myTasksPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveButton))
                    .addGroup(myTasksPanelLayout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addGroup(myTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(myTasksPanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5))
                            .addGroup(myTasksPanelLayout.createSequentialGroup()
                                .addGroup(myTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(newTaskButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addGroup(myTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addGap(118, 118, 118))
        );
        myTasksPanelLayout.setVerticalGroup(
            myTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myTasksPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(myTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(myTasksPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(myTasksPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(myTasksPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(newTaskButton)))
                .addGap(18, 18, 18)
                .addComponent(saveButton)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel6.add(myTasksPanel, "card2");

        myDayPanel.setBackground(new java.awt.Color(204, 255, 204));

        generateTodaysTasks.setText("Generate");
        generateTodaysTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateTodaysTasksActionPerformed(evt);
            }
        });

        jScrollPane5.setViewportView(todaySortedJList);

        jLabel7.setText("Schedule for today:");

        downloadSorted.setText("Save and Sort to File");
        downloadSorted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadSortedActionPerformed(evt);
            }
        });

        jScrollPane7.setViewportView(tomorrowSortedJList);

        jLabel9.setText("Schedule for tomorrow:");

        generateTomorrowsTasks.setText("Generate");
        generateTomorrowsTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateTomorrowsTasksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout myDayPanelLayout = new javax.swing.GroupLayout(myDayPanel);
        myDayPanel.setLayout(myDayPanelLayout);
        myDayPanelLayout.setHorizontalGroup(
            myDayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myDayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(myDayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(myDayPanelLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generateTodaysTasks)))
                .addGap(137, 137, 137)
                .addGroup(myDayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(myDayPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(generateTomorrowsTasks))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(85, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, myDayPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(downloadSorted)
                .addGap(28, 28, 28))
        );
        myDayPanelLayout.setVerticalGroup(
            myDayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myDayPanelLayout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(myDayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(generateTodaysTasks)
                    .addComponent(jLabel9)
                    .addComponent(generateTomorrowsTasks))
                .addGap(24, 24, 24)
                .addGroup(myDayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(downloadSorted)
                .addGap(22, 22, 22))
        );

        jPanel6.add(myDayPanel, "card3");

        myCalendarPanel.setBackground(new java.awt.Color(153, 204, 255));

        generateMonthTasks.setText("Generate");
        generateMonthTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMonthTasksActionPerformed(evt);
            }
        });

        jScrollPane6.setViewportView(monthsSortedJList);

        jLabel8.setText("Schedule Calendar:");

        javax.swing.GroupLayout myCalendarPanelLayout = new javax.swing.GroupLayout(myCalendarPanel);
        myCalendarPanel.setLayout(myCalendarPanelLayout);
        myCalendarPanelLayout.setHorizontalGroup(
            myCalendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myCalendarPanelLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(myCalendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(myCalendarPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateMonthTasks))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(413, Short.MAX_VALUE))
        );
        myCalendarPanelLayout.setVerticalGroup(
            myCalendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(myCalendarPanelLayout.createSequentialGroup()
                .addGap(132, 132, 132)
                .addGroup(myCalendarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(generateMonthTasks))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 403, Short.MAX_VALUE)
                .addGap(84, 84, 84))
        );

        jPanel6.add(myCalendarPanel, "card4");

        jPanel1.add(jPanel6, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        myTasksPanel.setVisible(true);
        myDayPanel.setVisible(false);
        myCalendarPanel.setVisible(false);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        myTasksPanel.setVisible(false);
        myDayPanel.setVisible(true);
        myCalendarPanel.setVisible(false);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        myTasksPanel.setVisible(false);
        myDayPanel.setVisible(false);
        myCalendarPanel.setVisible(true);
    }//GEN-LAST:event_jLabel3MouseClicked

    private void jPanel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseEntered
        // TODO add your handling code here:
        if(evt.getSource()==jPanel3) {
            jPanel3.setBackground(new Color(135,135,135));
        }
        if(evt.getSource()==jPanel4) {
            jPanel4.setBackground(new Color(135,135,135));
        }
        if(evt.getSource()==jPanel5) {
            jPanel5.setBackground(new Color(135,135,135));
        }
    }//GEN-LAST:event_jPanel3MouseEntered

    private void mouseexited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseexited
        // TODO add your handling code here:
        if(evt.getSource()==jPanel3) {
            jPanel3.setBackground(new Color(204,255,255));
        }
        if(evt.getSource()==jPanel4) {
            jPanel4.setBackground(new Color(204,255,255));
        }
        if(evt.getSource()==jPanel5) {
            jPanel5.setBackground(new Color(204,255,255));
        }
    }//GEN-LAST:event_mouseexited

    private void mouseclicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseclicked
        // TODO add your handling code here:
        if (evt.getSource()==jPanel3) {
            myTasksPanel.setVisible(true);
            myDayPanel.setVisible(false);
            myCalendarPanel.setVisible(false);
        }
        if (evt.getSource()==jPanel4) {
            myTasksPanel.setVisible(false);
            myDayPanel.setVisible(true);
            myCalendarPanel.setVisible(false);
        }
        if (evt.getSource()==jPanel5) {
            myTasksPanel.setVisible(false);
            myDayPanel.setVisible(false);
            myCalendarPanel.setVisible(true);
        }
    }//GEN-LAST:event_mouseclicked
    
    static final String TASKLIST = "tasks.txt";
    
    DefaultListModel dm = new DefaultListModel();
    DefaultListModel dmToday = new DefaultListModel();
    DefaultListModel dmTomorrow = new DefaultListModel();
    
    DefaultListModel dmSortedTomorrow = new DefaultListModel();
    DefaultListModel dmSortedMonth = new DefaultListModel();
    DefaultListModel dmSortedToday = new DefaultListModel();
    
    private void newTaskButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTaskButtonActionPerformed
        // TODO add your handling code here:
        Task newTask = createTask();
        taskList.add(newTask);
        
        checkList_JList.setModel(dm);
        tomorrowJList.setModel(dmTomorrow);
        todayJList.setModel(dmToday);
        
        dm.addElement(newTask.getName());
        if(newTask.getDueToday() == true)
            dmToday.addElement(newTask.getName());
        if(newTask.getDueTomorrow()== true)
            dmTomorrow.addElement(newTask.getName());
        
        
        
    }//GEN-LAST:event_newTaskButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        try {
            for (int i = 0; i < taskList.size(); i++) {
                saveToFile(taskList.get(i), i+1);
            }
        } catch(Exception e) {
            System.out.print("An exception error occured!");
        }
        
    }//GEN-LAST:event_saveButtonActionPerformed

    private void checkList_JListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkList_JListMouseClicked
        // TODO add your handling code here:
        String selected = checkList_JList.getSelectedValue().toString();
        
        int index = checkList_JList.getSelectedIndex();
        dm.removeElementAt(index);
        
        //if(todayJList==todayJList)
            
    }//GEN-LAST:event_checkList_JListMouseClicked

    private void todayJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_todayJListMouseClicked
        // TODO add your handling code here:
        String selected = todayJList.getSelectedValue().toString();
        
        int index = todayJList.getSelectedIndex();
        dmToday.removeElementAt(index);
    }//GEN-LAST:event_todayJListMouseClicked

    private void tomorrowJListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tomorrowJListMouseClicked
        // TODO add your handling code here:
        String selected = tomorrowJList.getSelectedValue().toString();
  
        int index = tomorrowJList.getSelectedIndex();
        dmTomorrow.removeElementAt(index);
    }//GEN-LAST:event_tomorrowJListMouseClicked

    private void generateTodaysTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateTodaysTasksActionPerformed
        // TODO add your handling code here:
        ArrayList<Task> todaysArrayList = new ArrayList();
        for(int i = 0; i < taskList.size(); i++){
            if(taskList.get(i).getDueToday() == true)
                todaysArrayList.add(taskList.get(i));
        }
        Queue<String> temp = new LinkedList<String>();
        temp = sortToQueue(todaysArrayList); 
        
        while(!temp.isEmpty())
            dmSortedToday.addElement(temp.remove());
        todaySortedJList.setModel(dmSortedToday);
    }//GEN-LAST:event_generateTodaysTasksActionPerformed

    private void downloadSortedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadSortedActionPerformed
        // TODO add your handling code here:
        File weeksFile = new File("weeksTasks.txt");
        PrintWriter pw;
        Stack<String> s = new Stack<String>();
        s = combineWeek();
        String temp;
        try {
            pw = new PrintWriter(weeksFile);
            while(!s.isEmpty()) {
                pw.print(s.pop());
            }
            pw.close();
        } catch (FileNotFoundException e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_downloadSortedActionPerformed

    private void generateTomorrowsTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateTomorrowsTasksActionPerformed
        // TODO add your handling code here:
        ArrayList<Task> tomorrowArrayList = new ArrayList();
        for(int i = 0; i < taskList.size(); i++){
            if(taskList.get(i).getDueToday() == true)
                tomorrowArrayList.add(taskList.get(i));
        }
        Queue<String> temp = new LinkedList<String>();
        temp = sortToQueue(tomorrowArrayList); 
        
        while(!temp.isEmpty())
            dmSortedTomorrow.addElement(temp.remove());
        tomorrowSortedJList.setModel(dmSortedTomorrow);
    }//GEN-LAST:event_generateTomorrowsTasksActionPerformed

    private void generateMonthTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateMonthTasksActionPerformed
        // TODO add your handling code here:
        ArrayList<Task> overdueTasks = new ArrayList();
        ArrayList<Task> todaysTasks = new ArrayList();
        ArrayList<Task> tomorrowsTasks = new ArrayList();
        
        for(int i = 0; i < taskList.size(); i++) {
            if(taskList.get(i).getOverdue() == true)
                overdueTasks.add(taskList.get(i));
        }
        for(int i = 0; i < taskList.size(); i++){
            if(taskList.get(i).getDueToday() == true)
                todaysTasks.add(taskList.get(i));
        }
        for(int i = 0; i < taskList.size(); i++){
            if(taskList.get(i).getDueTomorrow() == true)
                tomorrowsTasks.add(taskList.get(i));
        }
        Queue<String> temp = sortToQueue(overdueTasks);
        Queue<String> temp2 = sortToQueue(todaysTasks);
        Queue<String> temp3 = sortToQueue(tomorrowsTasks);
        
        
        while(!temp.isEmpty())
            dmSortedMonth.addElement(temp.remove());
        while(!temp2.isEmpty())
            dmSortedMonth.addElement(temp2.remove());
        while(!temp.isEmpty())
            dmSortedMonth.addElement(temp.remove());
        monthsSortedJList.setModel(dmSortedMonth);
    }//GEN-LAST:event_generateMonthTasksActionPerformed
    
    public Stack combineWeek() {
        ArrayList<Task> overdueArrayList = new ArrayList();
        for(int i = 0; i < taskList.size(); i++){
            if(taskList.get(i).getOverdue() == true)
                overdueArrayList.add(taskList.get(i));
        }
        Queue<String> temp = new LinkedList<String>();
        temp = sortToQueue(overdueArrayList); 
        
        ArrayList<Task> todaysArrayList = new ArrayList();
        for(int i = 0; i < taskList.size(); i++){
            if(taskList.get(i).getDueToday() == true)
                todaysArrayList.add(taskList.get(i));
        }
        Queue<String> temp1 = new LinkedList<String>();
        temp1 = sortToQueue(todaysArrayList); 
        
        ArrayList<Task> tomorrowsArrayList = new ArrayList();
        for(int i = 0; i < taskList.size(); i++){
            if(taskList.get(i).getDueTomorrow() == true)
                tomorrowsArrayList.add(taskList.get(i));
        }
        Queue<String> temp2 = new LinkedList<String>();
        temp2 = sortToQueue(todaysArrayList); 
        
        Stack<String> s = new Stack<String>();
        while(!temp.isEmpty())
            s.push(temp.remove());
        while(!temp1.isEmpty())
            s.push(temp1.remove());
        while(!temp2.isEmpty())
            s.push(temp2.remove());
        return s;
    }
    Queue<String> queueMyDay = new LinkedList<String>();
    
    public Queue sortToQueue(ArrayList<Task> unsortedTasks) {
        Collections.sort(unsortedTasks, new Comparator<Task>(){
            public int compare(Task t1, Task t2) {
                return Integer.valueOf(t1.getDuration_mins()).compareTo(t2.getDuration_mins());
            }
        });
        queueMyDay = new LinkedList<String>();
        for(int i = 0; i < unsortedTasks.size(); i++) {
            queueMyDay.add(unsortedTasks.get(i).getName());
        }
        return queueMyDay;
    }
    
    //totalSum(index, arraylist) for recursion
    public int totalSum(int index, ArrayList<Task> durationArray) {
        if(index < 0)
            return 0;
        else {
            return durationArray.get(index).getDuration_mins() + totalSum(index - 1, durationArray);
        }
    }
    
    public void saveToFile(Task t,int i) throws Exception {
        RandomAccessFile tasks = new RandomAccessFile("taskfile.txt","rw");
        t.write(tasks, i);
    }
    
    public void testSomeData() {
        try {
            System.out.println(new String(readSomeDataFromFile(TASKLIST,10,15)));
        } catch(IOException e) {
            System.out.println("Error occured!");
        }
    }
    public static byte[] readSomeDataFromFile(String file, int pos, int size) throws IOException {
        RandomAccessFile fileRan = new RandomAccessFile(file, "r");
        fileRan.seek(pos);
        byte[] bytesRead = new byte[size];
        fileRan.read(bytesRead);
        fileRan.close();
        return bytesRead;
    }
    public static void writeDataToFile(String file, String data, int pos) throws IOException {
        RandomAccessFile fileRan = new RandomAccessFile(file, "rw");
        fileRan.seek(pos);
        fileRan.write(data.getBytes());
        fileRan.close();
    }
    
    public Task createTask() {
        String name = JOptionPane.showInputDialog("Enter Name of Task: ");
        String description = JOptionPane.showInputDialog("What is the description for this task?");
        int duration_mins = 0;
        try {
            duration_mins = Integer.valueOf(JOptionPane.showInputDialog("What is the duration of this assignment? (How long to complete)"));
        } catch (Exception error) {
            duration_mins = Integer.valueOf(JOptionPane.showInputDialog("Please enter a number for the duration of task!"));
        }
        boolean dueToday = (JOptionPane.showInputDialog("Is this task due today? (yes or no)").equals("yes"));
        boolean dueTomorrow = (JOptionPane.showInputDialog("Is this task due tomorrow? (yes or no)").equals("yes"));
        boolean overdue = (JOptionPane.showInputDialog("Is this task overdue??").equals("yes"));
        return new Task(name, description, duration_mins, dueToday, dueTomorrow, overdue);
        
    }
    
    //queue to represent myDay Tasks (must be completed in order)
    //queue to remove last item added
    //add(E e) to add element to que and return boolean, element() gets element, offer(E e) returns bool and inerts element into queue
    //peek() retrieves head, poll() retrieves and removes head, remove same as poll but cant return null
    
    
    //stack to remove most recent
    //empty?,peep,pop(remove&return),push(add top),return(Object o)
    Stack<Task> stackMyDay = new Stack<Task>();
    
    
    //LinkedList taskList2 = new LinkedList();
    ArrayList<Task> taskList = new ArrayList();
    
    
    public void updateListsDisplayed(ArrayList<Task> taskList) {
        
        
        
        
        
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudyScheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudyScheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudyScheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudyScheduler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudyScheduler().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> checkList_JList;
    private javax.swing.JButton downloadSorted;
    private javax.swing.JButton generateMonthTasks;
    private javax.swing.JButton generateTodaysTasks;
    private javax.swing.JButton generateTomorrowsTasks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JList<String> monthsSortedJList;
    private javax.swing.JPanel myCalendarPanel;
    private javax.swing.JPanel myDayPanel;
    private javax.swing.JPanel myTasksPanel;
    private javax.swing.JButton newTaskButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JList<String> todayJList;
    private javax.swing.JList<String> todaySortedJList;
    private javax.swing.JList<String> tomorrowJList;
    private javax.swing.JList<String> tomorrowSortedJList;
    // End of variables declaration//GEN-END:variables
}
